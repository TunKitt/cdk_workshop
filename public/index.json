[
{
	"uri": "//localhost:1313/",
	"title": "CDK Basic",
	"tags": [],
	"description": "",
	"content": "CDK basic Overview CloudFormation is a service that allows users to deploy application architecture in code (Infrastructure as code). Users can write JSON or YAML files to deploy all AWS services (VPC, EC2, Lambda,\u0026hellip;). A collection of AWS resources will be deployed across a CloudFormation Stack, and you can easily manage instances, create new instances, or delete all associated resources. The whole process can be automatically generated and is completely free (you only need to pay for the resources created below).\nThe AWS Cloud Development Kit (CDK) is an AWS service based on CloudFormation. However, with CDK, users can define the architecture of AWS resources in popular programming languages ​​such as TypeScript, JavaScript, Python, Java, C#\nAWS Cloud Development Kit (AWS CDK) In this lab, we will practice using the CDK. After completing the lab, the reader will be able to\nUnderstand the basic concepts of CDK Deploy a basic architecture to AWS using CDK Configure EC2 through user data Before doing this workshop on CDK, you should do the CloudFormation workshop to understand a few basic concepts, because CDK actually works. Dynamically based on CloudFormation\nContent Introduction Preparation Basic CDK Create CDK Template Update CDK Template Resource Cleanup "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createiamrole/",
	"title": "Create IAM Role",
	"tags": [],
	"description": "",
	"content": "Create IAM Role Access the [AWS Management Console] interface(https://aws.amazon.com/console/)\nFind IAM Select IAM In the IAM interface\nSelect Roles Select Create role In the Select trusted entity interface\nSelect AWS service Use case, select EC2 Select Next In the Create role interface\nFind the policy AdministratorAccess Select the policy AdministratorAccess Select Next In the Role details interface\nRole name, enter CDK-Role Select Create role Complete role creation "
},
{
	"uri": "//localhost:1313/3-cdkbasic/3.1-createworkspace/",
	"title": "Create workspace",
	"tags": [],
	"description": "",
	"content": "Create workspace If you did the CloudFormation workshop, you can use the Cloud9 workspace created in that lab and skip the *first 6 steps * of this section.\nIf not, you can continue with the following steps.\nAccess the [AWS Management Console] interface(https://aws.amazon.com/console/)\nFind Cloud9 Select Cloud9 In the AWS Cloud9 interface\nSelect Create environment In the Create environment interface\nName, enter ASG-Cloud9-Workshop Environment type, select New EC2 instance: EC2 Instance is initialized with the Cloud9 environment. The instance is accessed via Cloud9 IDE using the SSH method. Instance type, select t3.small(2GiB RAM + 2vCPU) Platform, select Amazon Linux 2 (recommended) Timeout: after 30 minutes if EC2 Instance has no processes running, Cloud9 will stop Instance. Leave the Network option as default (default VPC) Select Create Environment interface just initialized "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview CloudFormation is a service that allows users to deploy application architecture in code (Infrastructure as code). Users can write JSON or YAML files to deploy all AWS services (VPC, EC2, Lambda,\u0026hellip;). A collection of AWS resources will be deployed across a CloudFormation Stack, and you can easily manage instances, create new instances, or delete all associated resources. The whole process can be automatically generated and is completely free (you only need to pay for the resources created below).\nThe AWS Cloud Development Kit (CDK) is an AWS service based on CloudFormation. However, with CDK, users can define the architecture of AWS resources in popular programming languages ​​such as TypeScript, JavaScript, Python, Java, C#\nAWS Cloud Development Kit (AWS CDK) In this lab, we will practice using the CDK. After completing the lab, the reader will be able to\nUnderstand the basic concepts of CDK Deploy a basic architecture to AWS using CDK Configure EC2 through user data Before doing this workshop on CDK, you should do the CloudFormation workshop to understand a few basic concepts, because CDK works. Dynamically based on CloudFormation\n"
},
{
	"uri": "//localhost:1313/3-cdkbasic/3.2-setupcloud9/",
	"title": "Configure Cloud9 environment",
	"tags": [],
	"description": "",
	"content": "Configure Cloud9 environment In the environment interface just initialized\nSelect the circular user icon in the right corner of the screen, next to Share Select Manage EC2 Instance In the EC2 interface\nSelect Action Select Security Select Modify IAM role In the Modify IAM role interface\nSelect the created role, this lab choose CDK-Role Select Update IAM role Completed the role assignment successfully. In the view of the AWS Cloud9 environment\nSelect Icon Cloud9 Select Preferences Cloud9 will manage IAM credentials automatically. We will need to disable this feature and use the IAM Role.\nSelect AWS SETTINGS Uncheck AWS managed temporary credentials Copy and Paste the command below into the Terminal of Cloud9 Workspace to install tools to support text processing on the command line. sudo yum -y install jq gettext bash-completion Similar to CloudFormation, you can install the cfn-lint tool to help you check CDK templates and other information, including auditing. Check if the resource properties are correct or not configured according to best practices or not. pip install cfn-lint Check the successful installation of cfn-lint using the following command: cfn-lint --version We will configure the aws cli to use the current Region. export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)\rexport AWS_REGION=ap-southeast-1\rexport AZS=($(aws ec2 describe-availability-zones --query \u0026#39;AvailabilityZones[].ZoneName\u0026#39; --output text --region $AWS_REGION)) We will save the configuration information to bash_profile echo \u0026#34;export ACCOUNT_ID=${ACCOUNT_ID}\u0026#34; | tee -a ~/.bash_profile\recho \u0026#34;export AWS_REGION=${AWS_REGION}\u0026#34; | tee -a ~/.bash_profile\recho \u0026#34;export AZS=(${AZS[@]})\u0026#34; | tee -a ~/.bash_profile\raws configure set default.region ${AWS_REGION} Check if CLI CDK is installed by running the command. cdk --version We will use the command to check if the Cloud9 IDE is using the IAM Role correctly. aws sts get-caller-identity --query Arn | grep CDK-Role -q \u0026amp;\u0026amp; echo \u0026#34;IAM role valid\u0026#34; || echo \u0026#34;IAM role NOT valid\u0026#34; "
},
{
	"uri": "//localhost:1313/2-prerequiste/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Preparation Create IAM Role "
},
{
	"uri": "//localhost:1313/3-cdkbasic/",
	"title": "Basic CDK",
	"tags": [],
	"description": "",
	"content": "Basic CDK Make sure you create and use resources in this region to avoid errors during practice. After completing this lab, you will know-how\nCreate VPC, subnet with CDK Create and configure 1 EC2 server using CDK CDK 2.27.0 will be used\n"
},
{
	"uri": "//localhost:1313/4-createcdktemplate/",
	"title": "Create CDK Template",
	"tags": [],
	"description": "",
	"content": "Create CDK Template We will work with the CDK mainly through the AWS CDK Toolkit (the tool was installed in the previous section). The AWS CDK Toolkit will run your code, generate a CloudFormation template, and deploy that template. The CDK Toolkit provides users with the ability to deploy, compare, remove, and debug a piece of CDK code. Refer to official AWS documentation on CDK\nIn this section, we will try to implement a VPC and corresponding public subnet, using Python in CDK\nAccess the created Cloud9 workspace. Create a new folder for the lab mkdir cdk-workshop\rcd cdk-workshop Initialize the workspace cdk. In this lab, we will use python language, but you can completely edit it into Typescript, Javascript, Java or C# cdk init app --language python Once it\u0026rsquo;s run, you can take a look at the directory architecture that has just been initialized. Pay attention to the two main files app.py and cdk_workshop/cdk_workshop_stack.py\nImport the required libraries in the file cdk_workshop/cdk_workshop_stack.py from aws_cdk import (\rStacks,\raws_ec2 as ec2,\raws_iam as iam\r)\rfrom aws_cdk.aws_s3_assets import Asset\rimport os\rfrom constructs import Construct In the file cdk_workshop/cdk_workshop_stack.py, declare 1 VPC and 2 public subnets located in the VPC by adding the following code to the __init__ function\n# VPC\rvpc = ec2.Vpc(self, \u0026#34;CDK-Workshop-App-VPC\u0026#34;,\rnat_gateways=0,\rsubnet_configuration=[ec2.SubnetConfiguration(name=\u0026#34;public\u0026#34;,subnet_type=ec2.SubnetType.PUBLIC)]\r) You can use the following command to initialize the project and combine the activation of the environment for the project. cdk init To activate the environment to avoid the error of running project. source .venv/bin/activate After activating the environment, we need to install the basic dependencies (in this lab, we install the Python dependencies) python -m pip install -r requirements.txt Check CloudFormation Test S3 bucket If this is your first time deploying the CDK, bootstrap the app by running the following command cdk bootstrap On the first run, we will need to bootstrap the CDK application. This bootstrap will\nCreate a new CloudFormation stack and a corresponding S3 bucket to hold assets for this stack (like Lambda function code, CloudFormation template) Create the necessary IAM roles so that the CDK CLI can deploy the resources Resource Deployment cdk deploy The above command is equivalent to running cdk deploy \u0026ndash;app ./app.py. When run, the code in the app.py file will be called. This code will import resources from cdk_workshop/cdk_workshop_stack.py, and generate the corresponding CloudFormation template in the cdk.out folder. This CloudFormation template will then be deployed on AWS.\nOnce deployed, you will see the newly created CloudFormation stack in the CloudFormation dashboard You can also see the VPC and 2 new public subnets created in the VPC dashboard If you\u0026rsquo;ve made it to this step, congratulations on successfully deploying your AWS resources through the CDK!\nIn the next section, we will use the created VPC and subnet to deploy an EC2 server and install Apache server on it. We will also get acquainted with some other features of the CDK such as generating CloudFormation configuration from CDK using cdk synch or checking ChangeSet using cdk diff\n"
},
{
	"uri": "//localhost:1313/5-updatecdktemplate/",
	"title": "Update CDK Template",
	"tags": [],
	"description": "",
	"content": "Update CDK Template In this section, we will use the created VPC and subnet to deploy an EC2 server and install the Apache server on it.\nBefore updating the CDK code, we will try to check the changed resources (ChangeSet) by running the command cdk diff In the background, this command will do 2 things\nRun cdk synth to generate a valid CloudFormation template into the cdk.out directory. Compare the resources in this template with the existing resources on the deployed CloudFormation Stack The result will be a ChangeSet between the existing CDK instance and the CDK instance deployed on AWS. Here, we haven\u0026rsquo;t changed anything, so the result will be as follows\nAdd the new role to the stack by adding the following code to the init() function of the file cdk_workshop/cdk_workshop_stack.py # Instance Role and SSM Managed Policy\rrole = iam.Role(self, \u0026#34;InstanceRole\u0026#34;, assumed_by=iam.ServicePrincipal(\u0026#34;ec2.amazonaws.com\u0026#34;)) Add security group web server to allow access from port 80 # Create a security group for the EC2 instance\rwebserverSG = ec2.SecurityGroup(self, \u0026#39;webserver-sg\u0026#39;, vpc=vpc)\rwebserverSG.addIngressRule(\rec2.Peer.anyIpv4(),\rec2.Port.tcp(80),\r\u0026#39;allow HTTP traffic from anywhere\u0026#39;,\r) Initialize EC2 server and assign created role as service role # AMI\ramzn_linux = ec2.MachineImage.latest_amazon_linux(\rgeneration=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\redition=ec2.AmazonLinuxEdition.STANDARD,\rvirtualization=ec2.AmazonLinuxVirt.HVM,\rstorage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE\r)\r# Instance\rinstance = ec2.Instance(self, \u0026#34;Instance\u0026#34;,\rinstance_type=ec2.InstanceType(\u0026#34;t3.nano\u0026#34;),\rmachine_image=amzn_linux,\rvpc = vpc,\rrole = role,\rsecurity_group = webserverSG\r) Add user data to the EC2 server ...\rdirname = os.path.dirname(__file__)\r...\rclass CdkWorkshopStack(Stack):\rdef __init__(self, scope: Construct, construct_id: str, **kwargs) -\u0026gt; None:\r...\r# Script in S3 as Asset\rasset = Asset(self, \u0026#34;Asset\u0026#34;, path=os.path.join(dirname, \u0026#34;configure.sh\u0026#34;))\rlocal_path = instance.user_data.add_s3_download_command(\rbucket=asset.bucket,\rbucket_key=asset.s3_object_key\r)\r# Userdata executes script from instance.user_data.add_execute_file_command(\rfile_path=local_path\r)\rasset.grant_read(instance.role)\rCheck file contents from aws_cdk import (\rStack,\raws_ec2 as ec2,\raws_iam as iam\r)\rfrom aws_cdk.aws_s3_assets import Asset\rimport os\rfrom constructs import Construct\rdirname = os.path.dirname(__file__)\rclass CdkWorkshopStack(Stack):\rdef __init__(self, scope: Construct, construct_id: str, **kwargs) -\u0026gt; None:\rsuper().__init__(scope, construct_id, **kwargs)\r# VPC\rvpc = ec2.Vpc(self, \u0026#34;CDK-Workshop-App-VPC\u0026#34;,\rnat_gateways=0,\rsubnet_configuration=[ec2.SubnetConfiguration(name=\u0026#34;public\u0026#34;,subnet_type=ec2.SubnetType.PUBLIC)]\r)\r# Instance Role and SSM Managed Policy\rrole = iam.Role(self, \u0026#34;InstanceRole\u0026#34;, assumed_by=iam.ServicePrincipal(\u0026#34;ec2.amazonaws.com\u0026#34;))\r# Create a security group for the EC2 instance\rwebserverSG = ec2.SecurityGroup(self, \u0026#39;webserver-sg\u0026#39;, vpc=vpc)\rwebserverSG.add_ingress_rule(\rec2.Peer.any_ipv4(),\rec2.Port.tcp(80),\r\u0026#39;allow HTTP traffic from anywhere\u0026#39;,\r);\rwebserverSG.add_ingress_rule(\rec2.Peer.any_ipv4(),\rec2.Port.tcp(22),\r\u0026#39;allow SSH traffic from anywhere\u0026#39;,\r);\r# AMI\ramzn_linux = ec2.MachineImage.latest_amazon_linux(\rgeneration=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\redition=ec2.AmazonLinuxEdition.STANDARD,\rvirtualization=ec2.AmazonLinuxVirt.HVM,\rstorage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE\r)\r# Instance\rinstance = ec2.Instance(self, \u0026#34;Instance\u0026#34;,\rinstance_type=ec2.InstanceType(\u0026#34;t3.nano\u0026#34;),\rmachine_image=amzn_linux,\rvpc = vpc,\rrole = role,\rsecurity_group = webserverSG\r)\r# Script in S3 as Asset\rasset = Asset(self, \u0026#34;Asset\u0026#34;, path=os.path.join(dirname, \u0026#34;configure.sh\u0026#34;))\rlocal_path = instance.user_data.add_s3_download_command(\rbucket=asset.bucket,\rbucket_key=asset.s3_object_key\r)\r# Userdata executes script from S3\rinstance.user_data.add_execute_file_command(\rfile_path=local_path\r)\rasset.grant_read(instance.role) Create the configure.sh file to store the initialization code for the EC2 instance. This initialization code will update the software and install the apache server on our instance Add the following code: #!/bin/bash\ryum update -y\ryum install -y httpd.x86_64\rsystemctl start httpd.service\rsystemctl enable httpd.service\recho “Hello World from $(hostname -f)” \u0026gt; /var/www/html/index.html Run the command cdk diff to see the change of the stack we just defined cdk diff Oh no, something went wrong. Looking at the log, you can see that the link of the asset file is wrong. We can see that cdk provides us with error handling, just like taskcat with CloudFormation.\nTo fix it, we just need to put the file [configure.sh](http://configure.sh) in the right place. From the path ~/environment/cdk-workshop, run the following command mv configure.sh cdk_workshop/ Rerun cdk diff . command cdk diff Template changes have been displayed\nDeploy to AWS cdk deploy Select y to continue Complete Deployment Access EC2 dashboard window, get Public IP information of EC2 instance If you see text display from apache then setup was successful "
},
{
	"uri": "//localhost:1313/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Clean up resources Congratulations on completing the basic CDK workshop. To summarize, you have\nInstall and familiarize yourself with CDK CLI Use CDK to deploy a simple infrastructure, including VPC Public subnet EC2 instances Roles and Security groups Install Apache on EC2 instance via user data Don\u0026rsquo;t forget to delete the created resources. There are two ways you can clean up resources:\nDelete CloudFormation stack on AWS console Use CDK CLI to delete stack cdk destroy Remember to delete Cloud9 Instance after you delete the CDK stack. "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]